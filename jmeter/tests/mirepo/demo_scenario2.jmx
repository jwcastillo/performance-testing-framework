<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMPUP, 30)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION, 60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(HOST)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(PORT,80)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(PROTOCOL,http)}</stringProp>
          <stringProp name="HTTPSampler.path">/${__P(PATH)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
	Copyright Â© 2017-2018 Anton Serputko. Contacts: serputko.a@gmail.com
	  
	Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.assertions.AssertionResult;

/*
	Set response message and send it to influxdb
	Write detailed error responses to jmeter log
*/ 

def transactionController = sampler.getThreadContext().getPreviousResult().getParent();

/*
	Check if previous failed sampler has parent and parent does not have sampler data. That means that parent is transaction controller.
*/
if(!sampleResult.isSuccessful()){
	if(transactionController &amp;&amp; !transactionController.getSamplerData()){
		handleParentTransactionController(transactionController);
	}else if(sampleResult.getSamplerData()){
		handleSampler(sampleResult);
	}	
}

/*
	Change responseMessage for all sub samplers of Transaction controller and set them to Transaction controller response message
	Post all sub samplers trace to log
*/
def handleParentTransactionController(SampleResult transactionSampleResult) {
	def transactionResponseMessage = &quot;\r&quot;+transactionSampleResult.getResponseMessage()+&quot;\r&quot;;
	def subResults = transactionSampleResult.getSubResults();
	def assertions;
	if(subResults){
		for (int i=0; i&lt;subResults.length; i++){
			if(!subResults[i].isSuccessful()){
				assertions = subResults[i].getAssertionResults();
				updateSampleResponseMessage(subResults[i], assertions);
				transactionResponseMessage = transactionResponseMessage+subResults[i].getSampleLabel()+&quot;; &quot;+subResults[i].getResponseMessage();
				postTraceToLog(subResults[i], assertions);
			}
		}
		transactionSampleResult.setResponseMessage(transactionResponseMessage.replaceAll(&quot;\n&quot;, &quot;\r&quot;));
	}
}

/*
	Change responseMessage for sampler and post trace to log
*/
def handleSampler(SampleResult sampleResult) {
	def assertions = sampleResult.getAssertionResults();
		updateSampleResponseMessage(sampleResult, assertions);
		sampleResult.setResponseMessage(sampleResult.getResponseMessage().replaceAll(&quot;\n&quot;, &quot;\r&quot;));
		postTraceToLog(sampleResult, assertions);
}

def updateSampleResponseMessage(SampleResult sampleResult, AssertionResult[] assertions) {
	def responseMessage = sampleResult.getResponseMessage();
	sampleResult.setResponseMessage(&quot;Response message: &quot;+sampleResult.getResponseMessage()+&quot;;&quot;+&quot;\rStatus code: &quot;+sampleResult.getResponseCode()+
		&quot;;&quot;+&quot;\rNumber of failed assertions: &quot;+assertions.length+&quot;\r&quot;+generateResponseTrace(sampleResult)+&quot;\r&quot;+generateAssertionTrace(assertions))+&quot;;&quot;;
}

def generateResponseTrace(SampleResult sample) {
	def sampleResult = sample;
	def responseLogMessage = &quot;\r&quot;+
		&quot;Sample Failed: &quot;+sampleResult.toString()+&quot;\r&quot;+
		&quot;Started at: &quot;+new Date(sampleResult.getStartTime())+&quot;\r&quot;+
		&quot;Finished at: &quot;+new Date(sampleResult.getEndTime())+&quot;\r&quot;+
		&quot;Request:\r&quot;+
		sampleResult.getSamplerData()+&quot;\r&quot;+
		&quot;REQUEST DATA\r&quot;+
		&quot;URL: &quot;+
		sampleResult.getUrlAsString()+&quot;\r&quot;+
		&quot;Request headers: \r&quot;+
		sampleResult.getRequestHeaders()+&quot;\r&quot;+
		&quot;Response: \r&quot; +
		sampleResult.getResponseMessage()+&quot;\r&quot;+
		&quot;Response code:&quot; + sampleResult.getResponseCode()+&quot;\r\r&quot;+
		&quot;Response data:\r&quot;+
		sampleResult.getResponseDataAsString()+&quot;\r&quot;;
	return responseLogMessage;
}

/*
	Generate log trace for all failed assertions of sampler
*/
def generateAssertionTrace(AssertionResult[] assertions) {
	def assertionLogMessage = &quot;&quot;;
	
	assertionLogMessage = &quot;Assertion results:\r&quot; +
	&quot;Number of failed assertions: &quot;+assertions.length+&quot;\r&quot;+assertionLogMessage;
	if(assertions.length&gt;0){
		for(int j=0; j&lt;assertions.length; j++){
			assertionLogMessage = assertionLogMessage + assertions[j].getName() + &quot; Failed; \r&quot; + 
			&quot;Failure Message: &quot; + assertions[j].getFailureMessage()+&quot;;\r&quot;
		}
	}
	return assertionLogMessage+&quot;\r\r&quot;
}

def postTraceToLog(SampleResult sample, AssertionResult[] assertions) {
	print(generateResponseTrace(sample)+&quot;\r&quot;+generateAssertionTrace(assertions));
	}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Listener>
        <hashTree/>
        <kg.apc.jmeter.reporters.ConsoleStatusLogger guiclass="kg.apc.jmeter.reporters.ConsoleStatusLoggerGui" testclass="kg.apc.jmeter.reporters.ConsoleStatusLogger" testname="jp@gc - Console Status Logger" enabled="true"/>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://localhost:8653/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbToken" elementType="Argument">
                <stringProp name="Argument.name">influxdbToken</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">${__groovy(import org.apache.jmeter.services.FileServer; def scriptName = FileServer.getFileServer().getScriptName(); return scriptName+&quot; @ &quot;+props.get(&quot;BUILD_NUMBER&quot;)+&quot; @ &quot;+new Date(),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value">scenario ${__groovy(import org.apache.jmeter.services.FileServer; def scriptName = FileServer.getFileServer().getScriptName(); return scriptName,)},${__P(USERS,N/A)} users, ${__P(RAMPUP, N/A)} sec rampup, ${__P(DURATION, N/A)} sec duration,Jenkins build #${__P(BUILD_NUMBER, N/A)}${__P(ADDITIONAL_TAGS, )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Jenkins build #${__P(BUILD_NUMBER, N/A)} ${__P(BUILD_URL, build url N/A)} with ${__groovy(import org.apache.jmeter.services.FileServer; def scriptName = FileServer.getFileServer().getScriptName(); return scriptName,)} scenario with ${__P(USERS,N/A)} users, ${__P(RAMPUP, N/A)} sec rampup and ${__P(DURATION, N/A)} sec duration was</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxDBRawBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
